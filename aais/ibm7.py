from simuq.environment import qubit, fock
from simuq.qmachine import *
from simuq.expression import Expression

mach = QMachine()
q0 = qubit(mach)
q1 = qubit(mach)
q2 = qubit(mach)
q3 = qubit(mach)
q4 = qubit(mach)
q5 = qubit(mach)
q6 = qubit(mach)

L01 = SignalLine(mach)
ins = Instruction(L01, 'derived', 'L01_XX')
ins.set_ham(q0.X() * q1.X())
ins = Instruction(L01, 'derived', 'L01_YY')
ins.set_ham(q0.Y() * q1.Y())
ins = Instruction(L01, 'derived', 'L01_ZZ')
ins.set_ham(q0.Z() * q1.Z())

L12 = SignalLine(mach)
ins = Instruction(L12, 'derived', 'L12_XX')
ins.set_ham(q1.X() * q2.X())
ins = Instruction(L12, 'derived', 'L12_YY')
ins.set_ham(q1.Y() * q2.Y())
ins = Instruction(L12, 'derived', 'L12_ZZ')
ins.set_ham(q1.Z() * q2.Z())

L13 = SignalLine(mach)
ins = Instruction(L13, 'derived', 'L13_XX')
ins.set_ham(q1.X() * q3.X())
ins = Instruction(L13, 'derived', 'L13_YY')
ins.set_ham(q1.Y() * q3.Y())
ins = Instruction(L13, 'derived', 'L13_ZZ')
ins.set_ham(q1.Z() * q3.Z())

L35 = SignalLine(mach)
ins = Instruction(L35, 'derived', 'L35_XX')
ins.set_ham(q3.X() * q5.X())
ins = Instruction(L35, 'derived', 'L35_YY')
ins.set_ham(q3.Y() * q5.Y())
ins = Instruction(L35, 'derived', 'L35_ZZ')
ins.set_ham(q3.Z() * q5.Z())

L45 = SignalLine(mach)
ins = Instruction(L45, 'derived', 'L45_XX')
ins.set_ham(q4.X() * q5.X())
ins = Instruction(L45, 'derived', 'L45_YY')
ins.set_ham(q4.Y() * q5.Y())
ins = Instruction(L45, 'derived', 'L45_ZZ')
ins.set_ham(q4.Z() * q5.Z())

L56 = SignalLine(mach)
ins = Instruction(L56, 'derived', 'L56_XX')
ins.set_ham(q5.X() * q6.X())
ins = Instruction(L56, 'derived', 'L56_YY')
ins.set_ham(q5.Y() * q6.Y())
ins = Instruction(L56, 'derived', 'L56_ZZ')
ins.set_ham(q5.Z() * q6.Z())
